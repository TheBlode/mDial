#!/usr/bin/perl
#
# agi-VDAD_LO_closer_inbound.agi version 0.5   *DBI-version*
# 
# runs when a call comes in from an inbound call. This script will 
# send the calls out to the closers that are logged in.
# ## THIS IS THE LOAD-BALANCED-OVERFLOW VERSION OF THE SCRIPT ##
# 
# if there are no available agents on this server, it will check for available agents on other servers,
# then it will check every second until an agent becomes available,
# if at the end of 360 seconds(default) it has not found an agent it will hangup the call and mark it as dropped
#
# This version asks for a 4-digit pin number to be entered and passed on as the fronter value to the closer
#
# You need to put lines similar to those below in your extensions.conf file:
# 
# ; 1. the full name of the IN GROUP to be used in vicidial for the inbound call
# ; 2. the phone number that was called, for the log entry
# ; 3. the callerID or lead_id of the person that called(usually overridden)
# ; 4. the park extension audio file name if used
# ; 5. the status of the call initially(usually not used)
# ; 6. the list_id to insert the new lead under if it is new (and callerID available)
# ; 7. the phone dialing code to insert with the new lead if new (and callerID available)
#
# ;inbound VICIDIAL calls:
#exten => 1234,1,Answer                  ; Answer the line
#exten => 1234,2,AGI(agi-VDAD_LO_closer_inbound.agi,CL_GALLERIA-----7274515134-----Closer-----park----------999-----1)
#exten => 1234,3,Hangup
#
# Copyright (C) 2006  Matt Florell <vicidial@gmail.com>    LICENSE: GPLv2
#
# changes:
# 60504-1214 - Added drop second/message/exten options from inbound_group
# 60809-1056 - Changed to DBI by Marin Blu
#            - changed to use /etc/astguiclient.conf for configs
# 60821-1021 - added output options check from database
#            - changed look for agent every 0.5 second for first 4 sec on hold
# 60905-1047 - changed look for agent every 0.25 second for first 4 sec on hold
# 70111-1600 - added ability to use BLEND/INBND/*_C/*_B/*_I as closer campaigns
#

$script = 'agi-VDAD_LO_closer_inbound.agi';

$DROP_TIME = 360;	### default number of seconds to wait until you drop a waiting call


($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$Fhour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}

$now_date_epoch = time();
$now_date = "$year-$mon-$mday $hour:$min:$sec";
$start_time=$now_date;
	$CIDdate = "$mon$mday$hour$min$sec";
	$tsSQLdate = "$year$mon$mday$hour$min$sec";
	$SQLdate = "$year-$mon-$mday $hour:$min:$sec";
	$SQLdateBEGIN = $SQLdate;

$BDtarget = ($secX - 5);
($Bsec,$Bmin,$Bhour,$Bmday,$Bmon,$Byear,$Bwday,$Byday,$Bisdst) = localtime($BDtarget);
$Byear = ($Byear + 1900);
$Bmon++;
if ($Bmon < 10) {$Bmon = "0$Bmon";}
if ($Bmday < 10) {$Bmday = "0$Bmday";}
if ($Bhour < 10) {$Bhour = "0$Bhour";}
if ($Bmin < 10) {$Bmin = "0$Bmin";}
if ($Bsec < 10) {$Bsec = "0$Bsec";}
	$BDtsSQLdate = "$Byear$Bmon$Bmday$Bhour$Bmin$Bsec";

# default path to astguiclient configuration file:
$PATHconf =		'/etc/astguiclient.conf';

open(conf, "$PATHconf") || die "can't open $PATHconf: $!\n";
@conf = <conf>;
close(conf);
$i=0;
foreach(@conf)
	{
	$line = $conf[$i];
	$line =~ s/ |>|\n|\r|\t|\#.*|;.*//gi;
	if ( ($line =~ /^PATHhome/) && ($CLIhome < 1) )
		{$PATHhome = $line;   $PATHhome =~ s/.*=//gi;}
	if ( ($line =~ /^PATHlogs/) && ($CLIlogs < 1) )
		{$PATHlogs = $line;   $PATHlogs =~ s/.*=//gi;}
	if ( ($line =~ /^PATHagi/) && ($CLIagi < 1) )
		{$PATHagi = $line;   $PATHagi =~ s/.*=//gi;}
	if ( ($line =~ /^PATHweb/) && ($CLIweb < 1) )
		{$PATHweb = $line;   $PATHweb =~ s/.*=//gi;}
	if ( ($line =~ /^PATHsounds/) && ($CLIsounds < 1) )
		{$PATHsounds = $line;   $PATHsounds =~ s/.*=//gi;}
	if ( ($line =~ /^PATHmonitor/) && ($CLImonitor < 1) )
		{$PATHmonitor = $line;   $PATHmonitor =~ s/.*=//gi;}
	if ( ($line =~ /^VARserver_ip/) && ($CLIserver_ip < 1) )
		{$VARserver_ip = $line;   $VARserver_ip =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_server/) && ($CLIDB_server < 1) )
		{$VARDB_server = $line;   $VARDB_server =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_database/) && ($CLIDB_database < 1) )
		{$VARDB_database = $line;   $VARDB_database =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_user/) && ($CLIDB_user < 1) )
		{$VARDB_user = $line;   $VARDB_user =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_pass/) && ($CLIDB_pass < 1) )
		{$VARDB_pass = $line;   $VARDB_pass =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_port/) && ($CLIDB_port < 1) )
		{$VARDB_port = $line;   $VARDB_port =~ s/.*=//gi;}
	$i++;
	}

if (!$VARDB_port) {$VARDB_port='3306';}
if (!$AGILOGfile) {$AGILOGfile = "$PATHlogs/agiout.$year-$mon-$mday";}

use DBI;
use Time::HiRes ('gettimeofday','usleep','sleep');  # necessary to have perl sleep command of less than one second
use Asterisk::AGI;
$AGI = new Asterisk::AGI;

$dbhA = DBI->connect("DBI:mysql:$VARDB_database:$VARDB_server:$VARDB_port", "$VARDB_user", "$VARDB_pass")
    or die "Couldn't connect to database: " . DBI->errstr;

### Grab Server values from the database
$stmtA = "SELECT agi_output FROM servers where server_ip = '$VARserver_ip';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
$rec_count=0;
while ($sthArows > $rec_count)
	{
	$AGILOG = '0';
	 @aryA = $sthA->fetchrow_array;
		$DBagi_output =			"$aryA[0]";
		if ($DBagi_output =~ /STDERR/)	{$AGILOG = '1';}
		if ($DBagi_output =~ /FILE/)	{$AGILOG = '2';}
		if ($DBagi_output =~ /BOTH/)	{$AGILOG = '3';}
	 $rec_count++;
	}
$sthA->finish();


### begin parsing run-time options ###
if (length($ARGV[0])>1)
{
	if ($AGILOG) {$agi_string = "Perl Environment Dump:";   &agi_output;}
	$i=0;
	while ($#ARGV >= $i)
	{
	$args = "$args $ARGV[$i]";
	if ($AGILOG) {$agi_string = "$i|$ARGV[$i]";   &agi_output;}
	$i++;
	}
	
	### list of command-line array arguments:
	@ARGV_vars = split(/-----/, $ARGV[0]);

	$channel_group = $ARGV_vars[0];
	$inbound_number = $ARGV_vars[1];
	$parked_by = $ARGV_vars[2];
	$park_extension = $ARGV_vars[3];
	$status = $ARGV_vars[4];
	$list_id = $ARGV_vars[5];
	$phone_code = $ARGV_vars[6];

	if ($args =~ /--help/i)
	{
	print "allowed run time options:\n  [-q] = quiet\n  [-t] = test\n  [-debug] = verbose debug messages\n\n";
	}
	else
	{
		if ($args =~ /-V/i)
		{
		$V=1;
		}
		if ($args =~ /-debug/i)
		{
		$DG=1;
		}
		if ($args =~ /-dbAVS/i)
		{
		$DGA=1;
		}
		if ($args =~ /-q/i)
		{
		$q=1;
		$Q=1;
		}
		if ($args =~ /-t/i)
		{
		$TEST=1;
		$T=1;
		}
	}
}

$|=1;
while(<STDIN>) {
	chomp;
	last unless length($_);
	if ($AGILOG)
	{
		if (/^agi_(\w+)\:\s+(.*)$/)
		{
			$AGI{$1} = $2;
		}
	}

	if (/^agi_uniqueid\:\s+(.*)$/)		{$unique_id = $1; $uniqueid = $unique_id;}
	if (/^agi_channel\:\s+(.*)$/)		{$channel = $1;}
	if (/^agi_extension\:\s+(.*)$/)		{$extension = $1;}
	if (/^agi_type\:\s+(.*)$/)		{$type = $1;}
	if (/^agi_callerid\:\s+(.*)$/)		{$callerid = $1;}
	if (/^agi_calleridname\:\s+(.*)$/)	{$calleridname = $1;}
	if ( (!$callerid) or ($callerid =~ /unknown/) )
		{$callerid = $calleridname;}


#	if ($channel =~ /^SIP/) {$channel =~ s/-.*//gi;}
#	if ($channel =~ /^Zap\//) {$channel =~ s/-\d$//gi;}
	if (length($callerid)<10) {$callerid = $parked_by;}
	if (length($pin)>0) {$callerid = $pin;}

	$phone_number='';

	### allow for external callerid to be collected
#	if ($extension =~ /\*\d\d\d\d\d\d\d\d\d\d\*/)
#		{
#		@EXT_vars = split(/\*/, $extension);
#		
#		$referring_extension =	$EXT_vars[0];	# initial extension sent
#		$channel_group =	$EXT_vars[1];	# name of the parked group
#		$inbound_number =	$EXT_vars[2];	# extension to send call to after parsing
#		$parked_by =		$EXT_vars[3];	# leadID
#		$park_extension =	$EXT_vars[4];	# filename of the on-hold music file
#		$comment_d =		$EXT_vars[5];	# N/A
#		$comment_e =		$EXT_vars[6];	# N/A
#
#		$PADlead_id = sprintf("%09s", $parked_by);	while (length($PADlead_id) > 9) {chop($PADlead_id);}
#		# JmmddhhmmssLLLLLLLLL
#			$JqueryCID = "J$CIDdate$PADlead_id";
#			$callerid = $JqueryCID;
#		### set the callerid to the filename of the audio for on-hold
#		print "SET CALLERID $JqueryCID\n";
#		checkresult($result);
#		print STDERR "callerID changed: $JqueryCID\n";
#		}
}

foreach $i (sort keys %AGI) 
{
	if ($AGILOG) {$agi_string = " -- $i = $AGI{$i}";   &agi_output;}
}

if ($AGILOG) {$agi_string = "AGI Variables: |$unique_id|$channel|$extension|$type|$callerid|";   &agi_output;}


$AGI->stream_file('beep');

&enter_pin_number;

$fronter = $pin;

if ($AGILOG) {$agi_string = "+++++ INBOUND CALL VDCL STARTED : |$channel_group|$callerid-$pin|$now_date";   &agi_output;}

$VDADphone='';
$VDADphone_code='';

if ($channel =~ /Local/i)
{
if ($AGILOG) {$agi_string = "+++++ VDAD START LOCAL CHANNEL: EXITING- $priority";   &agi_output;}
exit;
}

### Grab Server values from the database
$cbc=0;
$stmtA = "SELECT voicemail_dump_exten,ext_context,answer_transfer_agent,local_gmt,asterisk_version,max_vicidial_trunks FROM servers where server_ip = '$VARserver_ip';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
while ($sthArows > $cbc)
	{
	@aryA = $sthA->fetchrow_array;
	
	$DBvoicemail_dump_exten	= "$aryA[0]";
	$DBext_context		= "$aryA[1]";
	$DBanswer_transfer_agent	= "$aryA[2]";
	$DBSERVER_GMT		= "$aryA[3]";
	$DBasterisk_version	= "$aryA[4]";
	$DBmax_vicidial_trunks	= "$aryA[5]";
	if ($DBvoicemail_dump_exten)	{$voicemail_dump_exten = $DBvoicemail_dump_exten;}
	if ($DBext_context)		{$ext_context = $DBext_context;}
	if ($DBanswer_transfer_agent)	{$answer_transfer_agent = $DBanswer_transfer_agent;}
	if ($DBSERVER_GMT)		{$SERVER_GMT = $DBSERVER_GMT;}
	if ($DBasterisk_version)	{$AST_ver = $DBasterisk_version;}
	if ($DBmax_vicidial_trunks)	{$max_vicidial_trunks = $DBmax_vicidial_trunks;}
	$cbc++;
	}
$sthA->finish();  

### insert a record into the vicidial_list table 
$stmtA = "INSERT INTO vicidial_list (entry_date,modify_date,status,user,vendor_lead_code,source_id,list_id,called_since_last_reset,phone_code,phone_number,security_phrase,called_count,gmt_offset_now) values('$SQLdate','$tsSQLdate','INBND','$fronter','$inbound_number','VDCL','$list_id','Y','$phone_code','$phone_number','$channel_group','1','-5.00');";
$affected_rows = $dbhA->do($stmtA);
$cbc=0;
$stmtA = "select LAST_INSERT_ID() LIMIT 1;";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
while ($sthArows > $cbc)
	{
	@aryA = $sthA->fetchrow_array;
	$insert_lead_id = "$aryA[0]";
	$cbc++; 
	}
$sthA->finish();   
   
$new_lead_id = $insert_lead_id;
if ($AGILOG) {$agi_string = "|$stmtA|$new_lead_id|";   &agi_output;}

$PADlead_id = sprintf("%09s", $new_lead_id);	while (length($PADlead_id) > 9) {chop($PADlead_id);}
# YmmddhhmmssLLLLLLLLL
	$YqueryCID = "Y$CIDdate$PADlead_id";
	$callerid = $YqueryCID;
### set the callerid 
print "SET CALLERID $YqueryCID\n";
checkresult($result);
if ($AGILOG) {$agi_string = "callerID changed: $YqueryCID";   &agi_output;}

### Grab inbound_group values from the database
$cbc=0;
$stmtA = "SELECT drop_call_seconds,drop_message,drop_exten FROM vicidial_inbound_groups where group_id = '$channel_group';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
while ($sthArows > $cbc)
	{
	@aryA = $sthA->fetchrow_array;	
	$DBdrop_call_seconds	= "$aryA[0]";
	$DBdrop_message		= "$aryA[1]";
	$DBdrop_exten		= "$aryA[2]";
	if ($DBdrop_call_seconds)	{$DROP_TIME = $DBdrop_call_seconds;}
	if ($DBdrop_message)		{$drop_message = $DBdrop_message;}
	if ($DBdrop_exten)		{$drop_exten = $DBdrop_exten;}
	$cbc++;
	}
$sthA->finish();  


### insert a LIVE record to the vicidial_auto_calls table 
$stmtA = "INSERT INTO vicidial_auto_calls (server_ip,campaign_id,status,lead_id,uniqueid,callerid,channel,phone_code,phone_number,call_time,call_type,stage)  values('$VARserver_ip','$channel_group','LIVE','$new_lead_id','$uniqueid','$callerid','$channel','$phone_code','$phone_number','$SQLdate','IN','LIVE-0')";
	if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
$affected_rows = $dbhA->do($stmtA);

$stmtA = "INSERT INTO vicidial_log (uniqueid,lead_id,campaign_id,call_date,start_epoch,status,phone_code,phone_number,user,processed) values('$uniqueid','$new_lead_id','$channel_group','$SQLdate','$now_date_epoch','XFER','$phone_code','$phone_number','$fronter','N')";
	if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
$affected_rows = $dbhA->do($stmtA);
if ($AGILOG) {$agi_string = "--    VDAD : |$new_lead_id|$fronter|insert to vicidial_log: $uniqueid";   &agi_output;}

$stmtA = "INSERT INTO vicidial_closer_log (lead_id,campaign_id,call_date,start_epoch,status,phone_code,phone_number,user,processed) values('$new_lead_id','$channel_group','$SQLdate','$now_date_epoch','QUEUE','$phone_code','$phone_number','VDCL','N')";
	if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
$affected_rows = $dbhA->do($stmtA);
if ($AGILOG) {$agi_string = "--    VDCL : |$new_lead_id|insert to vicidial_closer_log";   &agi_output;}

$stmtA = "INSERT INTO vicidial_xfer_log (lead_id,campaign_id,call_date,phone_code,phone_number,user,closer) values('$new_lead_id','$channel_group','$SQLdate','$phone_code','$phone_number','$fronter','VDXL')";
	if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
$affected_rows = $dbhA->do($stmtA);
if ($AGILOG) {$agi_string = "--    VDXL : |$new_lead_id|insert to vicidial_xfer_log";   &agi_output;}

$VDADlead_id = $new_lead_id;

$drop_timer=0;
$drop_seconds=0;
$hold_message_counter=25;
$hold_tone_counter=0;

while ($drop_timer <= $DROP_TIME)
{
$channel_status = $AGI->channel_status("$channel");
if ($channel_status < 1)
	{
	if ($AGILOG) {$agi_string = "CHANNEL $channel DOWN $channel_status $DROP_TIME|$drop_timer CHECKING AGAIN";   &agi_output;}
	### sleep for 99 hundredths of a second
	usleep(1*990*1000);

	$channel_status_DC = $AGI->channel_status("$channel");

	if ($channel_status_DC < 1)
		{
		if ($AGILOG) {$agi_string = "CHANNEL $channel DOWN $channel_status   $DROP_TIME|$drop_timer";   &agi_output;}
		if ($drop_timer < 360) {$drop_seconds = $drop_timer;}
		$drop_timer = ($drop_timer + 360);
		}
	}
	$cbc=0;
	$stmtA = "SELECT next_agent_call FROM vicidial_inbound_groups where group_id='$channel_group';";
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
	$rec_countCUSTDATA=0;    
	while ($sthArows > $cbc)
		{
		@aryA = $sthA->fetchrow_array;
		$CAMP_callorder	= "$aryA[0]";
		$cbc++;
		}
	$sthA->finish(); 

	$agent_call_order='order by last_call_finish';
	if ($CAMP_callorder =~ /overall_user_level/i) {$agent_call_order = 'order by user_level desc,last_call_finish';}
	if ($CAMP_callorder =~ /oldest_call_start/i) {$agent_call_order = 'order by last_call_time';}
	if ($CAMP_callorder =~ /oldest_call_finish/i) {$agent_call_order = 'order by last_call_finish';}
	if ($CAMP_callorder =~ /random/i) {$agent_call_order = 'order by random_id';}
	
	$rec_countWAIT=0;
	$cbc=0;
	$stmtA = "SELECT count(*) FROM vicidial_auto_calls where status = 'LIVE' and server_ip='$VARserver_ip' and campaign_id = '$channel_group' and call_time < \"$SQLdateBEGIN\" and lead_id != '$VDADlead_id';";
		if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
 
	while ($sthArows > $cbc)
		{
		@aryA = $sthA->fetchrow_array;
		$rec_countWAIT = "$aryA[0]";
		$cbc++;
		}
	$sthA->finish();

	if ($rec_countWAIT < 1)
		{
		$stmtA = "UPDATE vicidial_live_agents set status='QUEUE',lead_id='$new_lead_id',uniqueid='$unique_id', channel='$channel', callerid='$callerid' where status IN('CLOSER','READY') and server_ip='$VARserver_ip' and campaign_id REGEXP '(CLOSER|BLEND|INBND|_C\$|_B\$|_I\$)' and closer_campaigns LIKE \"% $channel_group %\" and last_update_time > '$BDtsSQLdate' $agent_call_order limit 1;";
		my $affected_rows = $dbhA->do($stmtA);
		if ($AGILOG) {$agi_string = "--    VDAD get agent: |$affected_rows|$channel_group|$stmtA|";   &agi_output;}
		if ($affected_rows > 0)
			{
			$cbc=0;	
			$stmtA = "SELECT conf_exten,user,extension FROM vicidial_live_agents where status = 'QUEUE' and server_ip='$VARserver_ip' and campaign_id REGEXP '(CLOSER|BLEND|INBND|_C\$|_B\$|_I\$)' and callerid='$callerid' and channel='$channel' order by last_call_time limit 1;";
				if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
			$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
			$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
			$sthArows=$sthA->rows;
			$rec_countCUSTDATA=0;
				while ($sthArows > $cbc)
				{
				@aryA = $sthA->fetchrow_array;

				$VDADconf_exten	= "$aryA[0]";
				$VDADuser	= "$aryA[1]";
				$VDADextension	= "$aryA[2]";
			
				$cbc++;
				}
			$sthA->finish();

			$stmtA = "UPDATE vicidial_auto_calls set status='CLOSER', stage='CLOSER-$drop_timer' where callerid='$callerid';";
			$affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDCL XFER : |$affected_rows|$callerid\n|$stmtA|";   &agi_output;}

			$stmtA = "UPDATE vicidial_xfer_log set closer='$VDADuser' where lead_id = '$new_lead_id' order by call_date desc limit 1;";
			$affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDXL XFER vicidial_xfer_log update: |$affected_rows|$new_lead_id|$VDADuser\n|$stmtA|";   &agi_output;}

			$stmtA = "UPDATE vicidial_closer_log set user='$VDADuser' where lead_id='$new_lead_id' order by call_date desc limit 1;";
			my $affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    closer log : |$affected_rows|$new_lead_id\n|$stmtA|";   &agi_output;}

			if ($AGILOG) {$agi_string = "exiting VDAD app, transferring call to $VDADconf_exten";   &agi_output;}
			print "SET CONTEXT $ext_context\n";
				checkresult($result);
			print "SET EXTENSION $VDADconf_exten\n";
				checkresult($result);
			print "SET PRIORITY 1\n";
				checkresult($result);

				($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
				$year = ($year + 1900);
				$mon++;
				if ($mon < 10) {$mon = "0$mon";}
				if ($mday < 10) {$mday = "0$mday";}
				if ($hour < 10) {$Fhour = "0$hour";}
				if ($min < 10) {$min = "0$min";}
				if ($sec < 10) {$sec = "0$sec";}

			$stmtA = "UPDATE vicidial_closer_log set queue_seconds='$drop_timer' where lead_id = '$new_lead_id' and call_date='$SQLdate';";
			$affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDCL vcl update: |$affected_rows|$new_lead_id|\n|$stmtA|";   &agi_output;}

			$dbhA->disconnect();

				$now_date_epoch = time();
				$now_date = "$year-$mon-$mday $hour:$min:$sec";
			if ($AGILOG) {$agi_string = "XXXXX VDAD transferred: start|stop  $start_time|$now_date";   &agi_output;}
			
			exit;
			}
		else
			{
			if ($AGILOG) {$agi_string = "NNNNN No available agent found";   &agi_output;}
			}
		}
	else
		{
		if ($AGILOG) {$agi_string = "WWWWW VDAD XFER WAIT: |$rec_countWAIT|$channel_group|$channel|$callerid|$uniqueid|";   &agi_output;}
		}

###################################################################################################
### noone found locally available, now check for someone on another server to take the call
	$cbc=0;
	$rec_countWAITrem=0;
	$stmtA = "SELECT count(*) FROM vicidial_auto_calls where status = 'LIVE' and server_ip!='$VARserver_ip' and campaign_id = '$channel_group' and call_time < \"$SQLdateBEGIN\" and lead_id != '$VDADlead_id';";
		if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
	while ($sthArows > $cbc)
		{
		@aryA = $sthA->fetchrow_array;
		$rec_countWAITrem = "$aryA[0]";
		$cbc++;
		}
	$sthA->finish();
	
	if ($rec_countWAITrem < 1)
		{
		$stmtA = "UPDATE vicidial_live_agents set status='QUEUE',lead_id='$new_lead_id',uniqueid='$unique_id', channel='$channel', callerid='$callerid', call_server_ip='$VARserver_ip' where status IN('CLOSER','READY') and server_ip!='$VARserver_ip' and campaign_id REGEXP '(CLOSER|BLEND|INBND|_C\$|_B\$|_I\$)' and closer_campaigns LIKE \"% $channel_group %\" and last_update_time > '$BDtsSQLdate' $agent_call_order limit 1;";
		my $affected_rows = $dbhA->do($stmtA);
		if ($AGILOG) {$agi_string = "--    VDAD get agent: |$DROP_TIME|$drop_timer|$affected_rows|update of vla table: $channel_group|\n|$stmtA|";   &agi_output;}
		if ($affected_rows > 0)
			{
			$cbc=0;	
			$stmtA = "SELECT conf_exten,user,extension,server_ip FROM vicidial_live_agents where status = 'QUEUE' and server_ip!='$VARserver_ip' and campaign_id REGEXP '(CLOSER|BLEND|INBND|_C\$|_B\$|_I\$)' and callerid='$callerid' and channel='$channel' order by last_call_time limit 1;";
				if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
			$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
			$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
			$sthArows=$sthA->rows;
			$rec_countCUSTDATA=0;
			while ($sthArows > $cbc)
				{
				@aryA = $sthA->fetchrow_array;
				$VDADconf_exten	= "$aryA[0]";
				$VDADuser	= "$aryA[1]";
				$VDADextension	= "$aryA[2]";
				$VDADserver_ip	= "$aryA[3]";
				$cbc++;
				}
			$sthA->finish();

			$stmtA = "UPDATE vicidial_auto_calls set status='CLOSER', stage='CLOSER-$drop_timer' where callerid='$callerid';";
			my $affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDCL XFER REMOTE: |$affected_rows|update of vac table: $callerid\n|$stmtA|";   &agi_output;}

			$stmtA = "UPDATE vicidial_xfer_log set closer='$VDADuser' where lead_id = '$new_lead_id' order by call_date desc limit 1;";
			my $affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDXL vicidial_xfer_log update: |$affected_rows|$new_lead_id|$VDADuser\n|$stmtA|";   &agi_output;}

			$stmtA = "UPDATE vicidial_closer_log set user='$VDADuser' where lead_id='$new_lead_id' order by call_date desc limit 1;";
			my $affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    closer log : |$affected_rows|update of vcl table: $new_lead_id\n|$stmtA|";   &agi_output;}

			### format the remote server dialstring to get the call to the overflow agent meetme room
			$S='*';
			if( $VDADserver_ip =~ m/(\S+)\.(\S+)\.(\S+)\.(\S+)/ )
				{
				$a = leading_zero($1); 
				$b = leading_zero($2); 
				$c = leading_zero($3); 
				$d = leading_zero($4);
				$VDADremDIALstr = "$a$S$b$S$c$S$d$S";
				}
			$VDADremDIALstr .= "$VDADconf_exten";

			if ($AGILOG) {$agi_string = "exiting VDAD app, transferring call to $VDADremDIALstr";   &agi_output;}
			print "SET CONTEXT $ext_context\n";
				checkresult($result);
			print "SET EXTENSION $VDADremDIALstr\n";
				checkresult($result);
			print "SET PRIORITY 1\n";
				checkresult($result);

				($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
				$year = ($year + 1900);
				$mon++;
				if ($mon < 10) {$mon = "0$mon";}
				if ($mday < 10) {$mday = "0$mday";}
				if ($hour < 10) {$Fhour = "0$hour";}
				if ($min < 10) {$min = "0$min";}
				if ($sec < 10) {$sec = "0$sec";}

			$stmtA = "UPDATE vicidial_closer_log set queue_seconds='$drop_timer' where lead_id = '$new_lead_id' and call_date='$SQLdate';";
			$affected_rows = $dbhA->do($stmtA);
			if ($AGILOG) {$agi_string = "--    VDCL vcl update: |$affected_rows|$new_lead_id|\n|$stmtA|";   &agi_output;}

			$dbhA->disconnect();

				$now_date_epoch = time();
				$now_date = "$year-$mon-$mday $hour:$min:$sec";
			if ($AGILOG) {$agi_string = "XXXXX VDAD transferred: start|stop  $start_time|$now_date";   &agi_output;}
			
			exit;
			}
		else
			{
			if ($AGILOG) {$agi_string = "NNNNN No available remote agent found";   &agi_output;}
			}
		}
	else
		{
		if ($AGILOG) {$agi_string = "WWWWW VDAD XFER REMOTE WAIT: |$rec_countWAITrem|$channel_group|$channel|$callerid|$uniqueid|";   &agi_output;}
		}

if ($hold_message_counter > 30)
	{
	$AGI->stream_file('generic_hold');
	$hold_message_counter = 0;
	}
  else {$hold_message_counter++;}
if ($hold_tone_counter > 3)
	{
	$AGI->stream_file('hold_tone');
	$hold_tone_counter = 0;
	}
  else {$hold_tone_counter++;}

if ($drop_timer < 3)
	{
	### sleep for 23 hundredths of a second
	usleep(1*230*1000);
	$drop_timer = ($drop_timer + 0.25);
	}
else
	{
	### sleep for 99 hundredths of a second
	usleep(1*990*1000);

	$drop_timer++;
	}

$stmtA = "UPDATE vicidial_auto_calls set stage='LIVE-$drop_timer' where callerid='$callerid';";
$affected_rows = $dbhA->do($stmtA);
#if ($AGILOG) {$agi_string = "--    VDAD : |$affected_rows|update of vac table: $callerid\n|$stmtA|";   &agi_output;}

}


if ($drop_timer >= $DROP_TIME)
{
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$Fhour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}

$now_date_epoch = time();
$now_date = "$year-$mon-$mday $hour:$min:$sec";
	$CIDdate = "$mon$mday$hour$min$sec";
	$tsSQLdate = "$year$mon$mday$hour$min$sec";
	$SQLdate = "$year-$mon-$mday $hour:$min:$sec";
	$VDADvoicemail_ext = '';

$DROPexten = '';
if ($drop_seconds < 1) 
	{
	$drop_seconds = $DROP_TIME;

	if ($drop_message =~ /Y/)
		{
		$DROPexten = "$drop_exten";
		}
	else
		{
		$cbc=0;	
		$stmtA = "SELECT voicemail_ext FROM vicidial_inbound_groups where group_id = '$channel_group' limit 1;";
			if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
		$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
		$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
		$sthArows=$sthA->rows;
		$rec_countCUSTDATA=0;
		while ($sthArows > $cbc)
			{
			@aryA = $sthA->fetchrow_array;	
			$VDADvoicemail_ext	= "$aryA[0]";
			$VDADvoicemail_ext =~ s/\D//gi;
			if (length($VDADvoicemail_ext)>0)
				{$DROPexten = "$voicemail_dump_exten$VDADvoicemail_ext";}
			$cbc++;
			}
		$sthA->finish();
		}
	}


	### use STDOUT to send call to proper DROP location
	$VHqueryCID = "VH$CIDdate$VDADconf_exten";

	if (length($DROPexten)>0)
		{	### if DROP extension is defined then send the dropped call there instead of hangup
		if ($AGILOG) {$agi_string = "exiting the VDAD app, transferring call to $DROPexten";   &agi_output;}
		print "SET CONTEXT $ext_context\n";
			checkresult($result);
		print "SET EXTENSION $DROPexten\n";
			checkresult($result);
		print "SET PRIORITY 1\n";
			checkresult($result);
		}
	else
		{
		### insert a NEW record to the vicidial_manager table to be processed
		$stmtA = "INSERT INTO vicidial_manager values('','','$SQLdate','NEW','N','$VARserver_ip','','Hangup','$VHqueryCID','Channel: $channel','','','','','','','','','')";
		$affected_rows = $dbhA->do($stmtA);  
		if ($AGILOG) {$agi_string = "--    VDCL call_hungup timout: |$VHqueryCID|$VDADconf_exten|$channel|insert to vicidial_manager";   &agi_output;}
		}

	$stmtA = "DELETE FROM vicidial_auto_calls where callerid='$callerid' and server_ip='$VARserver_ip' order by call_time desc limit 1;";
	$affected_rows = $dbhA->do($stmtA);
	if ($AGILOG) {$agi_string = "--    VDCL vac record deleted: |$affected_rows| $VDADcampaign|";   &agi_output;}

	$stmtA = "UPDATE vicidial_closer_log set status='DROP',end_epoch='$now_date_epoch',length_in_sec='$drop_seconds',queue_seconds='$drop_seconds' where lead_id = '$new_lead_id' order by start_epoch desc limit 1;";
	$affected_rows = $dbhA->do($stmtA);
	if ($AGILOG) {$agi_string = "--    VDCL vcl update: |$affected_rows|$new_lead_id|\n|$stmtA|";   &agi_output;}

	$stmtA = "UPDATE vicidial_list set status='XDROP' where lead_id = '$new_lead_id';";
	$affected_rows = $dbhA->do($stmtA);
	if ($AGILOG) {$agi_string = "--    VDCL vl update: |$affected_rows|$new_lead_id|\n|$stmtA|";   &agi_output;}
}

$dbhA->disconnect();

exit;

sub enter_pin_number
{
# please enter the pin number followed by the pound key
# please enter your 4 digit pin number

$digit='';
undef $digit;
$interrupt_digit='';
undef $interrupt_digit;

$interrupt_digit = $AGI->stream_file('four_digit_id','123456789');   

	if ($AGILOG) {$agi_string = "interrupt_digit |$interrupt_digit|";   &agi_output;}

$digits_being_entered=1;
$totalDTMF='';
if ($interrupt_digit > 1)
	{
	if ($interrupt_digit == 48) {$interrupt_digit=0;}
	if ($interrupt_digit == 49) {$interrupt_digit=1;}
	if ($interrupt_digit == 50) {$interrupt_digit=2;}
	if ($interrupt_digit == 51) {$interrupt_digit=3;}
	if ($interrupt_digit == 52) {$interrupt_digit=4;}
	if ($interrupt_digit == 53) {$interrupt_digit=5;}
	if ($interrupt_digit == 54) {$interrupt_digit=6;}
	if ($interrupt_digit == 55) {$interrupt_digit=7;}
	if ($interrupt_digit == 56) {$interrupt_digit=8;}
	if ($interrupt_digit == 57) {$interrupt_digit=9;}
	
	$totalDTMF=$interrupt_digit;
	}

$digit_loop_counter=0;
#while ( ($digits_being_entered) && ($digit_loop_counter < 20) )
#	{
#	$digit = chr($AGI->wait_for_digit('30000'));  # wait 30 seconds for input or until the pound key is pressed
#	if ($digit =~ /\d/)
#		{
#		$totalDTMF = "$totalDTMF$digit";
#		print STDERR "digit |$digit|     TotalDTMF |$totalDTMF|\n";
#		$AGI->say_digits("$digit");
#		undef $digit;
#		}
#	else
#		{
#		$digits_being_entered=0;
#		}
#	
#	$digit_loop_counter++;
#	}

while ( ($digit_loop_counter < 4) )
	{
	$digit = chr($AGI->wait_for_digit('10000'));  # wait 10 seconds for input or until the pound key is pressed
	if ($digit =~ /\d/)
		{
		$totalDTMF = "$totalDTMF$digit";
		if ($AGILOG) {$agi_string = "digit |$digit|     TotalDTMF |$totalDTMF|";   &agi_output;}
#		$AGI->say_digits("$digit");
		undef $digit;
		}
	else
		{
		$digit_loop_counter=4;
		}
	
	$digit_loop_counter++;
	}

$totalDTMF =~ s/\D//gi;
$pin = $totalDTMF;
if ($totalDTMF) {if ($AGILOG) {$agi_string = "digit |$digit|     TotalDTMF |$totalDTMF|";   &agi_output;}}
}




sub checkresult {
	my ($res) = @_;
	my $retval;
	$tests++;
	chomp $res;
	if ($res =~ /^200/) {
		$res =~ /result=(-?\d+)/;
		if (!length($1)) {
		#	print STDERR "FAIL ($res)\n";
			$fail++;
		} else {
		#	print STDERR "PASS ($1)\n";
			$pass++;
		}
	} else {
	#	print STDERR "FAIL (unexpected result '$res')\n";
		$fail++;
	}
}



### you're call is very important to us, please stay on the line and you will be transferred to the next available agent


sub agi_output
{
if ($AGILOG >=2)
	{
	### open the log file for writing ###
	open(Lout, ">>$AGILOGfile")
			|| die "Can't open $AGILOGfile: $!\n";
	print Lout "$now_date|$script|$agi_string\n";
	close(Lout);
	}
	### send to STDERR writing ###
if ( ($AGILOG == '1') || ($AGILOG == '3') )
	{print STDERR "$now_date|$script|$agi_string\n";}
$agi_string='';
}
