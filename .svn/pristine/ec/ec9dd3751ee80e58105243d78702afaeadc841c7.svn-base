#!/usr/bin/perl
#
# cm_cid_change.agi version 2.14
# 
# Designed to allow you to change the CID of a call to either a fixed number or
# a combination of CUSTOMER, CLOSER just like the in-group Action Transfer CID
# feature. Script is designed to handle calls already assigned to leads, not
# new inbound calls that only have a phone number.
#
# Flag Options:
# 1- Fixed CID number, or CUSTOMER or CUSTOMERCLOSER
#
# example of what to put in the AGI entry for a Call Menu AGI route:
# cm_cid_change.agi,CUSTOMERCLOSER
#
# Copyright (C) 2017  Matt Florell <vicidial@gmail.com>    LICENSE: AGPLv2
#
# changes:
# 171011-0713 - First draft
#

$script = 'cm_cid_change.agi';

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$hour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}

$now_date_epoch = time();
$now_date = "$year-$mon-$mday $hour:$min:$sec";
$start_time=$now_date;
$CIDdate = "$mon$mday$hour$min$sec";
$tsSQLdate = "$year$mon$mday$hour$min$sec";
$SQLdate = "$year-$mon-$mday $hour:$min:$sec";
$SQLdateBEGIN = $SQLdate;

# default path to astguiclient configuration file:
$PATHconf =		'/etc/astguiclient.conf';

open(conf, "$PATHconf") || die "can't open $PATHconf: $!\n";
@conf = <conf>;
close(conf);
$i=0;
foreach(@conf)
	{
	$line = $conf[$i];
	$line =~ s/ |>|\n|\r|\t|\#.*|;.*//gi;
	if ( ($line =~ /^PATHhome/) && ($CLIhome < 1) )
		{$PATHhome = $line;   $PATHhome =~ s/.*=//gi;}
	if ( ($line =~ /^PATHlogs/) && ($CLIlogs < 1) )
		{$PATHlogs = $line;   $PATHlogs =~ s/.*=//gi;}
	if ( ($line =~ /^PATHagi/) && ($CLIagi < 1) )
		{$PATHagi = $line;   $PATHagi =~ s/.*=//gi;}
	if ( ($line =~ /^PATHweb/) && ($CLIweb < 1) )
		{$PATHweb = $line;   $PATHweb =~ s/.*=//gi;}
	if ( ($line =~ /^PATHsounds/) && ($CLIsounds < 1) )
		{$PATHsounds = $line;   $PATHsounds =~ s/.*=//gi;}
	if ( ($line =~ /^PATHmonitor/) && ($CLImonitor < 1) )
		{$PATHmonitor = $line;   $PATHmonitor =~ s/.*=//gi;}
	if ( ($line =~ /^VARserver_ip/) && ($CLIserver_ip < 1) )
		{$VARserver_ip = $line;   $VARserver_ip =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_server/) && ($CLIDB_server < 1) )
		{$VARDB_server = $line;   $VARDB_server =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_database/) && ($CLIDB_database < 1) )
		{$VARDB_database = $line;   $VARDB_database =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_user/) && ($CLIDB_user < 1) )
		{$VARDB_user = $line;   $VARDB_user =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_pass/) && ($CLIDB_pass < 1) )
		{$VARDB_pass = $line;   $VARDB_pass =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_port/) && ($CLIDB_port < 1) )
		{$VARDB_port = $line;   $VARDB_port =~ s/.*=//gi;}
	$i++;
	}

if (!$VARDB_port) {$VARDB_port='3306';}
if (!$AGILOGfile) {$AGILOGfile = "$PATHlogs/agiout.$year-$mon-$mday";}

use DBI;
use Asterisk::AGI;
$AGI = new Asterisk::AGI;

$dbhA = DBI->connect("DBI:mysql:$VARDB_database:$VARDB_server:$VARDB_port", "$VARDB_user", "$VARDB_pass")
    or die "Couldn't connect to database: " . DBI->errstr;

### Grab Server values from the database
$stmtA = "SELECT agi_output FROM servers where server_ip = '$VARserver_ip';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
$rec_count=0;
while ($sthArows > $rec_count)
	{
	$AGILOG = '0';
	@aryA = $sthA->fetchrow_array;
	$DBagi_output =	$aryA[0];
	if ($DBagi_output =~ /STDERR/)	{$AGILOG = '1';}
	if ($DBagi_output =~ /FILE/)	{$AGILOG = '2';}
	if ($DBagi_output =~ /BOTH/)	{$AGILOG = '3';}
	$rec_count++;
	}
$sthA->finish();


### begin parsing run-time options ###
if (length($ARGV[0])>1)
	{
	if ($AGILOG) {$agi_string = "Perl Environment Dump:";   &agi_output;}
	$i=0;
	while ($#ARGV >= $i)
		{
		$args = "$args $ARGV[$i]";
		if ($AGILOG) {$agi_string = "$i|$ARGV[$i]";   &agi_output;}
		$i++;
		}
	
	### list of command-line array arguments:
	@ARGV_vars = split(/---/, $ARGV[0]);

	$new_cid = 	$ARGV_vars[0];
	}

$|=1;
while(<STDIN>) 
	{
	chomp;
	last unless length($_);
	if ($AGILOG)
		{
		if (/^agi_(\w+)\:\s+(.*)$/)
			{
			$AGI{$1} = $2;
			}
		}

	if (/^agi_context\:\s+(.*)$/)		{$context = $1;}
	if (/^agi_uniqueid\:\s+(.*)$/)		{$unique_id = $1; $uniqueid = $unique_id;}
	if (/^agi_channel\:\s+(.*)$/)		{$channel = $1;}
	if (/^agi_extension\:\s+(.*)$/)		{$extension = $1;}
	if (/^agi_type\:\s+(.*)$/)			{$type = $1;}
	if (/^agi_callerid\:\s+(.*)$/)		{$callerid = $1;}
	if (/^agi_calleridname\:\s+(.*)$/)	{$calleridname = $1;}
	$callerid =~ s/\'|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;
	$calleridname =~ s/\'|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;
	$extension =~ s/\'|\"|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;

	if ( ($callerid =~ /\".*\"/) && ( (!$calleridname) or ($calleridname =~ /unknown/) ) )
		{
		$calleridname = $callerid;
		$calleridname =~ s/\<\d\d\d\d\d\d\d\d\d\d\>//gi;
		$calleridname =~ s/\"|\" //gi;
		}

	$callerid =~ s/\D//gi;
	$calleridname =~ s/unknown//gi;
	if ( (!$callerid) or ($callerid =~ /unknown/) )
		{$callerid = $calleridname;}

	if (length($callerid)>0) {$phone_number = $callerid;}
	   else {$phone_number = '';}
	if (length($calleridname)>0) {$VLcomments = $calleridname;}
	   else {$VLcomments = '';}
	if (length($callerid)<10) {$callerid = $parked_by;}
	if (length($pin)>0) {$callerid = $pin;}
	}

if ($AGILOG) {$agi_string = "AGI Variables: |$unique_id|$channel|$extension|$type|$callerid|";   &agi_output;}

### exit if no new CID is defined
if (length($new_cid) < 1)
	{
	if ($AGILOG) {$agi_string = "No new CID defined, exiting...";   &agi_output;}
	exit;
	}


$call_type='';
$lead_id='0';
$SleadsSQL='';
$CIDchanged=0;
if ($calleridname =~ /^V\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^Y\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^M\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^D\S\d\d\d\d\d\dW\d\d\d\d\d\d\d\d\d\dW/)
	{
	if ($calleridname =~ /^V/)
		{
		$lead_id = substr($calleridname, 10, 10);
		$call_type = 'auto-dial';
		}
	if ($calleridname =~ /^Y/)
		{
		$lead_id = substr($calleridname, 10, 10);
		$call_type = 'inbound';
		}
	if ($calleridname =~ /^M/)
		{
		$lead_id = substr($calleridname, 10, 10);
		$call_type = 'manual-dial';
		}
	if ($calleridname =~ /^D/)
		{
		$lead_id = substr($calleridname, 9, 10);
		$call_type = '3-way';
		}
	if (length($call_type) > 0)
		{
		$lead_id = ($lead_id + 0);
		$SleadsSQL	.= "'$lead_id',";

		$stmtA= "SELECT phone_number from vicidial_list where lead_id='$lead_id';";
		$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
		$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
		$sthArows=$sthA->rows;
			if ($AGILOG) {$agi_string = "$sthArows|$stmtA|";   &agi_output;}
		$g=0;
		while ($sthArows > $g)
			{
			@aryA = $sthA->fetchrow_array;
			$phone_number = $aryA[0];
			$g++;
			}
		$sthA->finish();

		if ($AGILOG) {$agi_string = "Already a Vicidial $call_type call: |$calleridname|$lead_id|$phone_number|     $vla_string";   &agi_output;}

		if ($new_cid =~ /CUSTOMER/)
			{$transfer_cid = $phone_number;}
		else
			{$transfer_cid = $new_cid;   $transfer_cid =~ s/CUSTOMER|CLOSER//gi;}
		if ($new_cid =~ /CLOSER/)
			{$newcallerid = "\"$calleridname <$transfer_cid>\"";}
		else
			{$newcallerid = "\"$transfer_cid <$transfer_cid>\"";}
		$AGI->set_callerid($newcallerid);
		print STDERR "Setting CID \"$newcallerid\"\n";
		checkresult($result);
		if ($AGILOG) {$agi_string = "callerID changed: $newcallerid";   &agi_output;}
		$CIDchanged++;
		}
	else
		{
		if ($AGILOG) {$agi_string = "Not already a Vicidial call: $calleridname";   &agi_output;}
		}
	}
else
	{
	if ($AGILOG) {$agi_string = "Not already a Vicidial call: $calleridname";   &agi_output;}
	}


if ($CIDchanged < 1) 
	{
	$transfer_cid = $new_cid;   $transfer_cid =~ s/CUSTOMER|CLOSER//gi;
	$newcallerid = "\"$transfer_cid <$transfer_cid>\"";
	$AGI->set_callerid($newcallerid);
	print STDERR "Setting CID \"$newcallerid\"\n";
	checkresult($result);
	if ($AGILOG) {$agi_string = "callerID changed: $newcallerid";   &agi_output;}
	$CIDchanged++;
	}

$dbhA->disconnect();

if ($AGILOG) {$agi_string = "exiting the cm_cid_change app...";   &agi_output;}

exit;



sub agi_output
	{
	if ($AGILOG >=2)
		{
		### open the log file for writing ###
		open(Lout, ">>$AGILOGfile")
				|| die "Can't open $AGILOGfile: $!\n";
		print Lout "$now_date|$script|$agi_string\n";
		close(Lout);
		}
		### send to STDERR writing ###
	if ( ($AGILOG == '1') || ($AGILOG == '3') )
		{print STDERR "$now_date|$script|$agi_string\n";}
	$agi_string='';
	}


sub checkresult 
	{
	my ($res) = @_;
	my $retval;
	$tests++;
	chomp $res;
	if ($res =~ /^200/) 
		{
		$res =~ /result=(-?\d+)/;
		if (!length($1)) 
			{
		#	print STDERR "FAIL ($res)\n";
			$fail++;
			} 
		else 
			{
		#	print STDERR "PASS ($1)\n";
			$pass++;
			}
		} 
	else 
		{
	#	print STDERR "FAIL (unexpected result '$res')\n";
		$fail++;
		}
	}
