#!/usr/bin/perl
#
# park_CID.agi version 2.14
# 
# runs before the park extension to populate the parked_channels entry with the channel's callerid
# 
# You need to put lines similar to those below in your extensions.conf file:
# 
# ;outbound dialing:
# exten => 8301,1,Answer
# exten => 8301,2,AGI(park_CID.agi)
# exten => 8301,3,Playback(park)
# exten => 8301,4,Hangup 
#
# Copyright (C) 2018  Matt Florell <vicidial@gmail.com>    LICENSE: AGPLv2
#
# changes:
# 60731-1423 - changed to use DBI-DBD::mysql
#            - changed to use /etc/astguiclient.conf for configs
# 60815-1256 - added output options check from database
# 90909-0922 - Fixed calleridname issue
# 101004-1012 - Changed park to Music On Hold, added option for park on AGI
# 130108-1817 - Changes for Asterisk 1.8 compatibility
# 180430-1842 - Added inbound_groups-park_ext option
#

$script = 'park_CID.agi';

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$hour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}
$now_date_epoch = time();
$now_date = "$year-$mon-$mday $hour:$min:$sec";

# default path to astguiclient configuration file:
$PATHconf =		'/etc/astguiclient.conf';

open(conf, "$PATHconf") || die "can't open $PATHconf: $!\n";
@conf = <conf>;
close(conf);
$i=0;
foreach(@conf)
	{
	$line = $conf[$i];
	$line =~ s/ |>|\n|\r|\t|\#.*|;.*//gi;
	if ( ($line =~ /^PATHhome/) && ($CLIhome < 1) )
		{$PATHhome = $line;   $PATHhome =~ s/.*=//gi;}
	if ( ($line =~ /^PATHlogs/) && ($CLIlogs < 1) )
		{$PATHlogs = $line;   $PATHlogs =~ s/.*=//gi;}
	if ( ($line =~ /^PATHagi/) && ($CLIagi < 1) )
		{$PATHagi = $line;   $PATHagi =~ s/.*=//gi;}
	if ( ($line =~ /^PATHweb/) && ($CLIweb < 1) )
		{$PATHweb = $line;   $PATHweb =~ s/.*=//gi;}
	if ( ($line =~ /^PATHsounds/) && ($CLIsounds < 1) )
		{$PATHsounds = $line;   $PATHsounds =~ s/.*=//gi;}
	if ( ($line =~ /^PATHmonitor/) && ($CLImonitor < 1) )
		{$PATHmonitor = $line;   $PATHmonitor =~ s/.*=//gi;}
	if ( ($line =~ /^VARserver_ip/) && ($CLIserver_ip < 1) )
		{$VARserver_ip = $line;   $VARserver_ip =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_server/) && ($CLIDB_server < 1) )
		{$VARDB_server = $line;   $VARDB_server =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_database/) && ($CLIDB_database < 1) )
		{$VARDB_database = $line;   $VARDB_database =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_user/) && ($CLIDB_user < 1) )
		{$VARDB_user = $line;   $VARDB_user =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_pass/) && ($CLIDB_pass < 1) )
		{$VARDB_pass = $line;   $VARDB_pass =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_port/) && ($CLIDB_port < 1) )
		{$VARDB_port = $line;   $VARDB_port =~ s/.*=//gi;}
	$i++;
	}


if (!$VARDB_port) {$VARDB_port='3306';}
if (!$AGILOGfile) {$AGILOGfile = "$PATHlogs/agiout.$year-$mon-$mday";}

use DBI;
use Asterisk::AGI;
$AGI = new Asterisk::AGI;

$dbhA = DBI->connect("DBI:mysql:$VARDB_database:$VARDB_server:$VARDB_port", "$VARDB_user", "$VARDB_pass")
    or die "Couldn't connect to database: " . DBI->errstr;

### Grab Server values from the database
$stmtA = "SELECT agi_output FROM servers where server_ip = '$VARserver_ip';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
$rec_count=0;
while ($sthArows > $rec_count)
	{
	$AGILOG = '0';
	@aryA = $sthA->fetchrow_array;
	$DBagi_output =	$aryA[0];
	if ($DBagi_output =~ /STDERR/)	{$AGILOG = '1';}
	if ($DBagi_output =~ /FILE/)	{$AGILOG = '2';}
	if ($DBagi_output =~ /BOTH/)	{$AGILOG = '3';}
	$rec_count++;
	}
$sthA->finish();


### begin parsing run-time options ###
if (length($ARGV[0])>1)
	{
	if ($AGILOG) {$agi_string = "Perl Environment Dump:";   &agi_output;}
	$i=0;
	while ($#ARGV >= $i)
		{
		$args = "$args $ARGV[$i]";
		if ($AGILOG) {$agi_string = "$i|$ARGV[$i]";   &agi_output;}
		$i++;
		}
	if ($args =~ />| |\"/i)
		{
		@CID = split(/-----/, $args);
		$fullCID=1;
		$callerid =	$CID[2];
		$calleridname =	$CID[3];
		}

	if ($args =~ /--help/i)
		{
		print "allowed run time options:\n  [-q] = quiet\n  [-t] = test\n  [-debug] = verbose debug messages\n\n";
		}
	else
		{
		if ($args =~ /-V/i)
			{
			$V=1;
			}
		if ($args =~ /-debug/i)
			{
			$DG=1;
			}
		if ($args =~ /-dbAVS/i)
			{
			$DGA=1;
			}
		if ($args =~ /-q/i)
			{
			$q=1;
			$Q=1;
			}
		if ($args =~ /-t/i)
			{
			$TEST=1;
			$T=1;
			}
		}
	}


$|=1;
while(<STDIN>) 
	{
	chomp;
	last unless length($_);
	if ($AGILOG)
		{
		if (/^agi_(\w+)\:\s+(.*)$/)
			{
			$AGI{$1} = $2;
			}
		}

	if (/^agi_uniqueid\:\s+(.*)$/)		{$unique_id = $1;}
	if (/^agi_channel\:\s+(.*)$/)		{$channel = $1;}
	if (/^agi_extension\:\s+(.*)$/)		{$extension = $1;}
	if (/^agi_type\:\s+(.*)$/)		{$type = $1;}
	if (!$fullCID)	# if no fullCID sent
		{
		if (/^agi_callerid\:\s+(.*)$/)		{$callerid = $1;}
		if (/^agi_calleridname\:\s+(.*)$/)	{$calleridname = $1;}
		if ( $calleridname =~ /\"/)  {$calleridname =~ s/\"//gi;}
		if ( (!$callerid) or ($callerid =~ /unknown/) or ( ($calleridname =~ /\d\d\d\d\d\d\d\d\d/) && (length($calleridname) > 16) ) )
			{$callerid = $calleridname;}
		if ( ($callerid =~ / /) && (length($callerid) > 20) )
			{$callerid =~ s/ .*//gi;}

		### allow for ANI being sent with the DNIS "*3125551212*9999*"
		if ($extension =~ /^\*\d\d\d\d\d\d\d\d\d\d\*/)
			{
			$callerid = $extension;
			$callerid =~ s/\*\d\d\d\d\*$//gi;
			$callerid =~ s/^\*//gi;
			$extension =~ s/^\*\d\d\d\d\d\d\d\d\d\d\*//gi;
			$extension =~ s/\*$//gi;
			}
		$calleridname = $callerid;
		}
	}

if ($AGILOG) {$agi_string = "AGI Environment Dump:";   &agi_output;}

foreach $i (sort keys %AGI) 
	{
	if ($AGILOG) {$agi_string = " -- $i = $AGI{$i}";   &agi_output;}
	}


if ($AGILOG) {$agi_string = "AGI Variables: |$unique_id|$channel|$extension|$type|$callerid|";   &agi_output;}

if ($AGILOG) {$agi_string = "CALL BEING PARKED";   &agi_output;}


$stmtA = "UPDATE parked_channels set channel_group='$callerid' where server_ip='$VARserver_ip' and channel='$channel';";
	if ($AGILOG) {$agi_string = "|$stmtA|";   &agi_output;}
	$affected_rows = $dbhA->do($stmtA);
if ($AGILOG) {$agi_string = "--    Park record updated: |$affected_rows|   |$callerid|$channel|$VARserver_ip";   &agi_output;}

$VACcount=0;
$VAC_campaign_id='';
$VAC_call_type='';
$VAC_extension='';
$VLAcount=0;
$VLA_user='';
$VLA_campaign_id='';
$VCcount=0;
$park_context='default';
$MOHfiles=0;

$stmtA = "SELECT campaign_id,call_type,extension FROM vicidial_auto_calls where callerid='$callerid';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$VACcount=$sthA->rows;
if ($VACcount > 0)
	{
	@aryA = $sthA->fetchrow_array;
	$VAC_campaign_id =	$aryA[0];
	$VAC_call_type =	$aryA[1];
	$VAC_extension =	$aryA[2];
	}
$sthA->finish();

if ($VACcount > 0)
	{
	$stmtA = "SELECT user,campaign_id FROM vicidial_live_agents where callerid='$callerid';";
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$VLAcount=$sthA->rows;
	if ($VLAcount > 0)
		{
		@aryA = $sthA->fetchrow_array;
		$VLA_user =			$aryA[0];
		$VLA_campaign_id =	$aryA[1];
		}
	$sthA->finish();
	if ($VLAcount > 0)
		{
		$stmtA = "SELECT park_file_name,ivr_park_call_agi FROM vicidial_campaigns where campaign_id='$VLA_campaign_id';";
		$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
		$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
		$VCcount=$sthA->rows;
		if ($VCcount > 0)
			{
			@aryA = $sthA->fetchrow_array;
			$park_context =			$aryA[0];
			$VC_ivr_park_call_agi =	$aryA[1];
			}
		$sthA->finish();

		if ($calleridname =~ /^Y\d\d\d\d\d\d\d\d\d\d\d\d\d\d/i)
			{
			if ($AGILOG) {$agi_string = "--    In-Group MOH override check:   |$VAC_campaign_id|$VAC_call_type|$VLA_user|   |$callerid|";   &agi_output;}
			$stmtA = "SELECT park_file_name FROM vicidial_inbound_groups where group_id='$VAC_campaign_id' and park_file_name!='' and park_file_name IS NOT NULL;";
			$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
			$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
			$VICcount=$sthA->rows;
			if ($VICcount > 0)
				{
				@aryA = $sthA->fetchrow_array;
				$VICpark_context =			$aryA[0];
				}
			$sthA->finish();

			if ($VICcount > 0)
				{
				$stmtA = "SELECT count(*) FROM vicidial_music_on_hold_files where moh_id='$VICpark_context';";
				$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
				$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
				$MOHIcount=$sthA->rows;
				if ($MOHIcount > 0)
					{
					@aryA = $sthA->fetchrow_array;
					$MOHIfiles =			$aryA[0];
					}
				$sthA->finish();
				if ($MOHIfiles > 0)
					{
					if ($AGILOG) {$agi_string = "--    In-Group MOH override confirmed:   |$park_context|$VICpark_context|$VAC_call_type|$VLA_user|   |$callerid|";   &agi_output;}
					$park_context = $VICpark_context;
					}
				}
			}

		$stmtA = "SELECT count(*) FROM vicidial_music_on_hold_files where moh_id='$park_context';";
		$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
		$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
		$MOHcount=$sthA->rows;
		if ($MOHcount > 0)
			{
			@aryA = $sthA->fetchrow_array;
			$MOHfiles =			$aryA[0];
			}
		$sthA->finish();
		if ($MOHfiles< 1)
			{
			if ($AGILOG) {$agi_string = "--    Context empty, switching to default: |$park_context|$MOHcount|$MOHfiles|   |$callerid|";   &agi_output;}

			$park_context =	'default';
			}

		### call was parked to an IVR, launch the AGI script
		if ( ($VCcount > 0) && ($VAC_extension =~ /PARK_IVR/) && (length($VC_ivr_park_call_agi)>2) )
			{
			if ($AGILOG) {$agi_string = "--    Starting AGI: |$VC_ivr_park_call_agi|   |$callerid|";   &agi_output;}

			print "EXEC AGI $VC_ivr_park_call_agi\n";
				checkresult($result);

			if ($AGILOG) {$agi_string = "--    AGI Done:  |$callerid|";   &agi_output;}
			}
		}
	}


$dbhA->disconnect();


$AGI->stream_file('sip-silence');
$AGI->stream_file('sip-silence');
$AGI->stream_file('sip-silence');
$AGI->stream_file('sip-silence');

if ($AGILOG) {$agi_string = "--    Starting MoH: |$park_context|   |$callerid|";   &agi_output;}

print "SET MUSIC ON $park_context\n";
	$result = <STDIN>;
	checkresult($result);

sleep(360);

if ($AGILOG) {$agi_string = "--    MoH Done:  |$callerid|";   &agi_output;}


exit;



sub agi_output
	{
	if ($AGILOG >=2)
		{
		### open the log file for writing ###
		open(Lout, ">>$AGILOGfile")
				|| die "Can't open $AGILOGfile: $!\n";
		print Lout "$now_date|$script|$agi_string\n";
		close(Lout);
		}
		### send to STDERR writing ###
	if ( ($AGILOG == '1') || ($AGILOG == '3') )
		{print STDERR "$now_date|$script|$agi_string\n";}
	$agi_string='';
	}


sub checkresult 
	{
	my ($res) = @_;
	my $retval;
	$tests++;
	chomp $res;
	if ($res =~ /^200/) 
		{
		$res =~ /result=(-?\d+)/;
		if (!length($1)) 
			{
		#	print STDERR "FAIL ($res)\n";
			$fail++;
			}
		else 
			{
		#	print STDERR "PASS ($1)\n";
			$pass++;
			}
		}
	else 
		{
		#	print STDERR "FAIL (unexpected result '$res')\n";
			$fail++;
		}
	}
