#!/usr/bin/perl
#/* ========================================
# * ███╗   ███╗██████╗ ██╗ █████╗ ██╗
# * ████╗ ████║██╔══██╗██║██╔══██╗██║
# * ██╔████╔██║██║  ██║██║███████║██║
# * ██║╚██╔╝██║██║  ██║██║██╔══██║██║
# * ██║ ╚═╝ ██║██████╔╝██║██║  ██║███████╗
# * ╚═╝     ╚═╝╚═════╝ ╚═╝╚═╝  ╚═╝╚══════╝
# * ========================================
# * mDial - Omni-Channel Contact Centre Suite.
# * Initially Written by Martin McCarthy.
# * Contributions welcome.
# * Active: 2020 - 2023.
# *
# * This software is licensed under AGPLv2.
# * You can find more information here;
# * https://www.gnu.org/licenses/agpl-3.0.en.html
# * A copy of the license is also shipped with this build.
# *
# * Important note: this software is provided to you free of charge.
# * If you paid for this software, you were ripped off.
# *
# * This project is a fork of the awesome FOSS project, ViCiDial.
# * ViCiDial is copyrighted by Matt Florell and the ViCiDial Group
# * under the AGPLv2 license.
# *
# * You can find out more about ViCiDial;
# * Web: https://www.vicidial.com/
# * Email: Matt Florell <vicidial@gmail.com>
# * IRC: Libera.Chat - ##vicidial
# *
# * Bug reports, feature requests and patches welcome!
# * ======================================== */
$script = 'cm_sc_areacode.agi';
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$hour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}
$now_date_epoch = time();
$now_date = "$year-$mon-$mday $hour:$min:$sec";
$start_time=$now_date;
$CIDdate = "$mon$mday$hour$min$sec";
$tsSQLdate = "$year$mon$mday$hour$min$sec";
$SQLdate = "$year-$mon-$mday $hour:$min:$sec";
$SQLdateBEGIN = $SQLdate;
$state='';
$CIDlead_id='';
$PATHconf =		'/etc/astguiclient.conf';
open(conf, "$PATHconf") || die "can't open $PATHconf: $!\n";
@conf = <conf>;
close(conf);
$i=0;
foreach(@conf)
	{
	$line = $conf[$i];
	$line =~ s/ |>|\n|\r|\t|\#.*|;.*//gi;
	if ( ($line =~ /^PATHhome/) && ($CLIhome < 1) )
		{$PATHhome = $line;   $PATHhome =~ s/.*=//gi;}
	if ( ($line =~ /^PATHlogs/) && ($CLIlogs < 1) )
		{$PATHlogs = $line;   $PATHlogs =~ s/.*=//gi;}
	if ( ($line =~ /^PATHagi/) && ($CLIagi < 1) )
		{$PATHagi = $line;   $PATHagi =~ s/.*=//gi;}
	if ( ($line =~ /^PATHweb/) && ($CLIweb < 1) )
		{$PATHweb = $line;   $PATHweb =~ s/.*=//gi;}
	if ( ($line =~ /^PATHsounds/) && ($CLIsounds < 1) )
		{$PATHsounds = $line;   $PATHsounds =~ s/.*=//gi;}
	if ( ($line =~ /^PATHmonitor/) && ($CLImonitor < 1) )
		{$PATHmonitor = $line;   $PATHmonitor =~ s/.*=//gi;}
	if ( ($line =~ /^VARserver_ip/) && ($CLIserver_ip < 1) )
		{$VARserver_ip = $line;   $VARserver_ip =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_server/) && ($CLIDB_server < 1) )
		{$VARDB_server = $line;   $VARDB_server =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_database/) && ($CLIDB_database < 1) )
		{$VARDB_database = $line;   $VARDB_database =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_user/) && ($CLIDB_user < 1) )
		{$VARDB_user = $line;   $VARDB_user =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_pass/) && ($CLIDB_pass < 1) )
		{$VARDB_pass = $line;   $VARDB_pass =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_port/) && ($CLIDB_port < 1) )
		{$VARDB_port = $line;   $VARDB_port =~ s/.*=//gi;}
	$i++;
	}
if (!$VARDB_port) {$VARDB_port='3306';}
if (!$AGILOGfile) {$AGILOGfile = "$PATHlogs/agiout.$year-$mon-$mday";}
use DBI;
use Asterisk::AGI;
$AGI = new Asterisk::AGI;
$dbhA = DBI->connect("DBI:mysql:$VARDB_database:$VARDB_server:$VARDB_port", "$VARDB_user", "$VARDB_pass")
    or die "Couldn't connect to database: " . DBI->errstr;
$stmtA = "SELECT agi_output FROM servers where server_ip = '$VARserver_ip';";
$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
$sthArows=$sthA->rows;
$rec_count=0;
while ($sthArows > $rec_count)
	{
	$AGILOG = '0';
	@aryA = $sthA->fetchrow_array;
	$DBagi_output =	$aryA[0];
	if ($DBagi_output =~ /STDERR/)	{$AGILOG = '1';}
	if ($DBagi_output =~ /FILE/)	{$AGILOG = '2';}
	if ($DBagi_output =~ /BOTH/)	{$AGILOG = '3';}
	$rec_count++;
	}
$sthA->finish();
if (length($ARGV[0])>1)
	{
	if ($AGILOG) {$agi_string = "Perl Environment Dump:";   &agi_output;}
	$i=0;
	while ($#ARGV >= $i)
		{
		$args = "$args $ARGV[$i]";
		if ($AGILOG) {$agi_string = "$i|$ARGV[$i]";   &agi_output;}
		$i++;
		}
	@ARGV_vars = split(/---/, $ARGV[0]);
	$country_code = 	$ARGV_vars[0];
	$ac_length = 		$ARGV_vars[1];
	$container_id = 	$ARGV_vars[2];
	}
if (length($country_code) < 1)
	{$country_code = '1';}
if (length($ac_length) < 1)
	{$ac_length = '3';}
$no_container=0;
if (length($container_id) < 1)
	{$no_container=1;}
else
	{
	$stmtA= "SELECT container_entry from vicidial_settings_containers where container_id='$container_id';";
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
		if ($AGILOG) {$agi_string = "$sthArows|$stmtA|";   &agi_output;}
	if ($sthArows > 0)
		{
		@aryA = $sthA->fetchrow_array;
		$container_entry	= $aryA[0];
		}
	else
		{$no_container=2;}
	$sthA->finish();
	}
if ($no_container > 0) 
	{
	if ($AGILOG) {$agi_string = "container_id not set($container_id|$no_container), exiting the cm_sc_areacode.agi app, transferring call to C @ $context";   &agi_output;}
	print "SET CONTEXT $context\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET EXTENSION C\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET PRIORITY 1\n";
		$result = <STDIN>;
		checkresult($result);
	exit;
	}
$|=1;
while(<STDIN>) 
	{
	chomp;
	last unless length($_);
	if ($AGILOG)
		{
		if (/^agi_(\w+)\:\s+(.*)$/)
			{
			$AGI{$1} = $2;
			}
		}
	if (/^agi_context\:\s+(.*)$/)		{$context = $1;}
	if (/^agi_uniqueid\:\s+(.*)$/)		{$unique_id = $1; $uniqueid = $unique_id;}
	if (/^agi_channel\:\s+(.*)$/)		{$channel = $1;}
	if (/^agi_extension\:\s+(.*)$/)		{$extension = $1;}
	if (/^agi_type\:\s+(.*)$/)			{$type = $1;}
	if (/^agi_callerid\:\s+(.*)$/)		{$callerid = $1;}
	if (/^agi_calleridname\:\s+(.*)$/)	{$calleridname = $1;}
	}
foreach $i (sort keys %AGI)
	{
	if ($AGILOG) {$agi_string = " -- $i = $AGI{$i}";   &agi_output;}
	}
$callerid =~ s/\'|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;
$calleridname =~ s/\'|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;
$extension =~ s/\'|\"|\\\\|\\\|\\|\\;|\\\;|\;|;//gi;
if ($calleridname =~ /^V\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^Y\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^M\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d/)
	{
	$callerid = $calleridname;
	$callerid =~ s/\"//gi;
	$callerid =~ s/ .*//gi;
	$CIDlead_id = $callerid;
	$CIDlead_id = substr($CIDlead_id, 10, 10);
	$CIDlead_id = ($CIDlead_id + 0);
	$stmtA= "SELECT state,phone_number from vicidial_list where lead_id='$CIDlead_id';";
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
	if ($AGILOG) {$agi_string = "$sthArows|$stmtA|";   &agi_output;}
	if ($sthArows > 0)
		{
		@aryA = $sthA->fetchrow_array;
		$state =			$aryA[0];
		$phone_number =		$aryA[1];
		}
	$sthA->finish();
	}
if ( ($callerid =~ /\".*\"/) && ( (!$calleridname) or ($calleridname =~ /unknown/) ) )
	{
	$calleridname = $callerid;
	$calleridname =~ s/\<\d\d\d\d\d\d\d\d\d\d\>//gi;
	$calleridname =~ s/\"|\" //gi;
	}
if ($callerid !~ /^V\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^Y\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d|^M\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d/)
	{
	$callerid =~ s/\D|\'//gi;
	$calleridname =~ s/unknown|\'//gi;
	if ( (!$callerid) or ($callerid =~ /unknown/) )
		{$callerid = $calleridname;}
	if (length($callerid)>0) {$phone_number = $callerid;}
	   else {$phone_number = '';}
	if (length($calleridname)>0) {$VLcomments = $calleridname;}
	   else {$VLcomments = '';}
	if (length($callerid)<10) {$callerid = $parked_by;}
	if (length($pin)>0) {$callerid = $pin;}
	}
$phone_ac = substr($phone_number, 0, $ac_length);
if ($AGILOG) {$agi_string = "AGI Variables: |$unique_id|$channel|$extension|$type|$callerid|     |$country_code|$phone_number($phone_ac)|$ac_length|";   &agi_output;}
$AGI->stream_file('sip-silence');
$AGI->stream_file('sip-silence');
$AGI->stream_file('sip-silence');
$g=0;
if ( (length($phone_ac) >= $ac_length) && (length($state) < 2) )
	{
	$stmtA= "SELECT state from vicidial_phone_codes where country_code='$country_code' and areacode='$phone_ac';";
	$sthA = $dbhA->prepare($stmtA) or die "preparing: ",$dbhA->errstr;
	$sthA->execute or die "executing: $stmtA ", $dbhA->errstr;
	$sthArows=$sthA->rows;
	if ($AGILOG) {$agi_string = "$sthArows|$stmtA|";   &agi_output;}
	while ($sthArows > $g)
		{
		@aryA = $sthA->fetchrow_array;
		$state	= $aryA[0];
		$g++;
		}
	$sthA->finish();
	}
if ( ($g < 1) && (length($state) < 2) )
	{
	if ($AGILOG) {$agi_string = "entry not found($phone_ac), exiting the cm_sc_areacode.agi app, transferring call to D @ $context";   &agi_output;}
	print "SET CONTEXT $context\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET EXTENSION D\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET PRIORITY 1\n";
		$result = <STDIN>;
		checkresult($result);
	exit;
	}
$match=0;
if (length($container_entry) > 5) 
	{
	@container_lines = split(/\n/,$container_entry);
	$i=0;
	foreach(@container_lines)
		{
		$container_lines[$i] =~ s/;.*//gi;
		if ( (length($container_lines[$i]) > 5) && ($container_lines[$i] =~ /\|/i) )
			{
			if($DBX){print STDERR "$container_lines[$i]\n";}
			if ($container_lines[$i] =~ /\|--NOMATCHES--/i)
				{
				@line_details = split(/\|/,$container_lines[$i]);
				$match++;
				$destination_type =		$line_details[0];
				$destination =			$line_details[1];
				if (!$Q) {print " - NOMATCHES line found($i) $destination_type|$destination|$destination_states\n";}
				}
			else
				{
				@line_details = split(/\|/,$container_lines[$i]);
				$match++;
				$destination_states =	$line_details[2];
				@state_details = split(/ /,$destination_states);
				$s=0;
				foreach(@state_details)
					{
					if ($state_details[$s] =~ /$state/) 
						{
						$match++;
						$destination_type =		$line_details[0];
						$destination =			$line_details[1];
						if (!$Q) {print " - STATE MATCH FOUND($i|$state) $destination_type|$destination|$destination_states\n";}
						}
					$s++;
					}
				}
			}
		else
			{if ($DBX > 0) {print "     blank line: $i|$container_lines[$i]|\n";}}
		$i++;
		}
	if ($destination_type =~ /DID/) 
		{
		$destination_context =	'trunkinbound';
		$destination_exten =	$destination;
		}
	if ($destination_type =~ /EXTEN/) 
		{
		$destination_context =	'default';
		$destination_exten =	$destination;
		}
	if ($destination_type =~ /CALLMENU/) 
		{
		$destination_context =	$destination;
		$destination_exten =	's';
		}
	}
else
	{
	if ($Q < 1)
		{
		$match=0;
		print "ERROR: SETTINGS CONTAINER EMPTY: $container_id $container_entry $g\n";
		}
	}
$dbhA->disconnect();
if ($match < 1) 
	{
	if ($AGILOG) {$agi_string = "entry not found($state|$phone_ac), exiting the cm_sc_areacode.agi app, transferring call to C @ $context";   &agi_output;}
	print "SET CONTEXT $context\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET EXTENSION C\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET PRIORITY 1\n";
		$result = <STDIN>;
		checkresult($result);
	exit;
	}
else
	{
	$AGI->exec("EXEC Set(_state=$state)");
	if ($AGILOG) {$agi_string = "entry found($state|$phone_ac|$destination_type), exiting the cm_sc_areacode.agi app, transferring call to $destination_exten @ $destination_context";   &agi_output;}
	print "SET CONTEXT $destination_context\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET EXTENSION $destination_exten\n";
		$result = <STDIN>;
		checkresult($result);
	print "SET PRIORITY 1\n";
		$result = <STDIN>;
		checkresult($result);
	exit;
	}
sub agi_output
{
if ($AGILOG >=2)
	{
	open(Lout, ">>$AGILOGfile")
			|| die "Can't open $AGILOGfile: $!\n";
	print Lout "$now_date|$script|$agi_string\n";
	close(Lout);
	}
if ( ($AGILOG == '1') || ($AGILOG == '3') )
	{print STDERR "$now_date|$script|$agi_string\n";}
$agi_string='';
}
sub checkresult 
	{
	my ($res) = @_;
	my $retval;
	$tests++;
	chomp $res;
	if ($res =~ /^200/) 
		{
		$res =~ /result=(-?\d+)/;
		if (!length($1)) 
			{
			$fail++;
			} 
		else 
			{
			$pass++;
			}
		} 
	else 
		{
		$fail++;
		}
	}
